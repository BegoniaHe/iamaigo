name: Go Release

on:
  # 定时触发，每天中午12点触发
  schedule:
    - cron: '0 12 * * *'  # 每天12:00 UTC
  # 手动触发工作流
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go_version: [1.20]  # 可以根据需要调整 Go 版本

    steps:
    # 步骤1: 检出代码
    - name: Checkout code
      uses: actions/checkout@v4

    # 步骤2: 设置 Go 环境
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go_version }}

    # 步骤3: 设置 Go 环境变量和构建项目
    - name: Build the project
      run: |
        # 设置 GOOS 和 GOARCH 环境变量，根据平台不同进行交叉编译
        if [[ $RUNNER_OS == "Linux" ]]; then
          GOOS=linux GOARCH=amd64 go build -o build/linux/amd64/myapp
        elif [[ $RUNNER_OS == "macOS" ]]; then
          GOOS=darwin GOARCH=amd64 go build -o build/macos/amd64/myapp
        elif [[ $RUNNER_OS == "Windows" ]]; then
          GOOS=windows GOARCH=amd64 go build -o build/windows/amd64/myapp.exe
        fi

    # 步骤4: 上传构建的文件到工作流构建产物
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: myapp-${{ matrix.os }}-${{ matrix.go_version }}
        path: |
          build/linux/amd64/myapp
          build/macos/amd64/myapp
          build/windows/amd64/myapp.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    # 步骤1: 获取 GitHub 的最新发布信息
    - name: Checkout code
      uses: actions/checkout@v4

    # 步骤2: 设置 GitHub CLI
    - name: Set up GitHub CLI
      uses: peter-evans/gh-cli-action@v2

    # 步骤3: 创建新的 GitHub Release
    - name: Create GitHub Release
      run: |
        TAG_NAME="v$(date +'%Y.%m.%d')"
        gh release create $TAG_NAME \
          build/linux/amd64/myapp \
          build/macos/amd64/myapp \
          build/windows/amd64/myapp.exe \
          --title "Release $TAG_NAME" \
          --notes "Automated release created by GitHub Actions."
